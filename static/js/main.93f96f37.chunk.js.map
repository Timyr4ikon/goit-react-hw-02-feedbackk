{"version":3,"sources":["components/HeaderFeedback/HeaderFeedback.styled.js","components/HeaderFeedback/HeaderFeedback.js","components/Statistics/Statistics.styled.js","components/Notification/Notification.js","components/Statistics/Statistics.js","components/Section/Section.js","App.js","index.js"],"names":["FBButton","styled","button","HeaderFeedback","plusFeedBack","onClick","StatItem","p","Notification","message","Statistics","statistic","isEmpty","good","neutral","bad","total","percentage","Section","title","this","props","render","Component","App","useState","state","setState","key","newValue","totalValue","countTotalFeedback","percentagePositive","countPositiveFeedbackPercentage","isEmptyFB","isEmptyFeedBacks","value","newGoodValue","Number","toFixed","ReactDOM","StrictMode","document","getElementById"],"mappings":"uVAEO,IAAMA,EAAWC,IAAOC,OAAV,KC0BNC,EAtBQ,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAWrB,OAAO,oCACC,kBAACJ,EAAD,CAAUK,QAXA,WACdD,EAAa,UAUT,QACA,kBAACJ,EAAD,CAAUK,QATG,WACjBD,EAAa,aAQT,WACA,kBAACJ,EAAD,CAAUK,QAPD,WACbD,EAAa,SAMT,S,+GCjBL,IAAME,EAAWL,IAAOM,EAAV,KCKNC,EANM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAO,oCACP,2BAAIA,KC8BOC,EA3BI,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACjB,OAAOA,EAAUC,QAChB,oCACG,kBAAC,EAAD,CAAcH,QAAS,uBAG1B,oCACG,kBAACH,EAAD,cAAiBK,EAAUE,MAC3B,kBAACP,EAAD,iBAAoBK,EAAUG,SAC9B,kBAACR,EAAD,aAAgBK,EAAUI,KAC1B,kBAACT,EAAD,eAAkBK,EAAUK,OAC5B,kBAACV,EAAD,2BAA8BK,EAAUM,WAAxC,Q,gCCfaC,E,uKAKb,IAAMC,EAAQC,KAAKC,MAAMF,MACzB,OAAO,iCACH,4BAAKA,GACJC,KAAKC,MAAMC,c,GARaC,aCiDtBC,MA/Cf,WAAgB,IAAD,EACaC,mBAAS,CACjCZ,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,WAAY,EACZL,SAAS,IAPE,mBACNc,EADM,KACCC,EADD,KAUPvB,EAAe,SAACwB,GAAS,IAAD,EACtBC,EAAWH,EAAME,GAAO,EACxBE,EAAaC,EAAmB,GAChCC,EAAqBC,EAAgCL,EAAKE,GAC1DI,EAAYC,EAAiBL,GACnCH,EAAS,eAAID,GAAL,mBAAaE,EAAMC,GAAnB,sBAAoCC,GAApC,2BAA4DE,GAA5D,wBAAyFE,GAAzF,MAGJC,EAAmB,SAACL,GACxB,GAAIA,EAAa,EACf,OAAO,GAILC,EAAqB,SAACK,GAC1B,OAAOV,EAAMV,MAAQoB,GAGjBH,EAAkC,SAACL,EAAKE,GAC1C,IAAIO,EAAeX,EAAMb,KAKvB,MAJU,SAARe,IACFS,EAAeX,EAAMb,KAAO,GAETyB,OAAOD,EAAeP,EAAa,KACpCS,QAAQ,IAGhC,OAAO,oCACH,kBAAC,EAAD,CAASpB,MAAM,wBAAwBG,OAAQ,kBAC7C,kBAAC,EAAD,CAAgBlB,aAAcA,OAEhC,kBAAC,EAAD,CAASe,MAAM,aAAaG,OAAQ,kBAClC,kBAAC,EAAD,CAAYX,UAAWe,SC3C/Bc,IAASlB,OACP,kBAAC,IAAMmB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.93f96f37.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const FBButton = styled.button`\r\nmargin: 0 5px;\r\n`;","import React from 'react';\r\nimport { \r\n    FBButton\r\n} from './HeaderFeedback.styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst HeaderFeedback = ({plusFeedBack}) => {\r\n    const addGoodFB = () => {\r\n        plusFeedBack('good')\r\n    };\r\n    const addNeutralFB = () => {\r\n        plusFeedBack('neutral')\r\n    };\r\n    const addBadFB = () => {\r\n        plusFeedBack('bad')\r\n    };\r\n\r\n    return <>\r\n            <FBButton onClick={addGoodFB}>Good</FBButton>\r\n            <FBButton onClick={addNeutralFB}>Neutral</FBButton>\r\n            <FBButton onClick={addBadFB}>Bad</FBButton>\r\n    </>\r\n};\r\n\r\nHeaderFeedback.propTypes = {\r\n    plusFeedBack: PropTypes.any.isRequired\r\n}\r\n\r\nexport default HeaderFeedback;","import styled from 'styled-components';\r\n\r\n\r\nexport const StatItem = styled.p`\r\ndisplay: inline-block;\r\nmargin: 0 20px\r\n`;","import React from 'react';\r\n\r\nconst Notification = ({message}) => {\r\n    return <>\r\n    <p>{message}</p>\r\n    </>\r\n};\r\n\r\nexport default Notification;","import React from 'react';\r\nimport {\r\n    StatItem\r\n} from './Statistics.styled';\r\nimport Notification from '../Notification/Notification';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({statistic}) => {\r\n    return statistic.isEmpty ? \r\n    (<>\r\n        <Notification message={\"No feedback given\"}/>\r\n    </>) \r\n    : \r\n    (<>\r\n        <StatItem>Good: {statistic.good}</StatItem>\r\n        <StatItem>Neutral: {statistic.neutral}</StatItem>\r\n        <StatItem>Bad: {statistic.bad}</StatItem>\r\n        <StatItem>Total: {statistic.total}</StatItem>\r\n        <StatItem>Positive feedback: {statistic.percentage} %</StatItem>\r\n    </>)\r\n};\r\n\r\nStatistics.propTypes = {statistic: PropTypes.shape({\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    percentage: PropTypes.oneOfType([\r\n        PropTypes.number,\r\n        PropTypes.string\r\n    ]).isRequired,\r\n    isEmpty: PropTypes.bool.isRequired\r\n})}\r\n\r\nexport default Statistics;","import React, { Component } from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nexport default class Section extends Component {\r\n    static propTypes = {\r\n        title: propTypes.string.isRequired\r\n    };\r\n    render() {\r\n        const title = this.props.title;\r\n        return <section>\r\n            <h2>{title}</h2>\r\n            {this.props.render()}\r\n        </section>\r\n    }\r\n}\r\n","import React, {useState} from 'react';\r\nimport HeaderFeedback from './components/HeaderFeedback/HeaderFeedback';\r\nimport Statistics from './components/Statistics/Statistics';\r\nimport Section from './components/Section/Section';\r\n\r\nfunction App() {\r\n  const [state, setState] = useState({\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n    total: 0,\r\n    percentage: 0,\r\n    isEmpty: true\r\n  });\r\n\r\n  const plusFeedBack = (key) => {\r\n    const newValue = state[key] + 1;\r\n    const totalValue = countTotalFeedback(1);\r\n    const percentagePositive = countPositiveFeedbackPercentage(key, totalValue);\r\n    const isEmptyFB = isEmptyFeedBacks(totalValue);\r\n    setState({...state, [key]: newValue, total: totalValue, percentage: percentagePositive, isEmpty: isEmptyFB});\r\n  };\r\n\r\n  const isEmptyFeedBacks = (totalValue) => {\r\n    if (totalValue > 0){\r\n      return false\r\n    }\r\n  }\r\n\r\n  const countTotalFeedback = (value) => {\r\n    return state.total + value\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = (key, totalValue) => {\r\n      let newGoodValue = state.good;\r\n      if (key === 'good'){\r\n        newGoodValue = state.good + 1;\r\n      }\r\n        const percentage = Number(newGoodValue / totalValue * 100);\r\n        return percentage.toFixed(2)\r\n  };\r\n\r\n  return <>\r\n      <Section title=\"Please leave feedback\" render={() => (\r\n        <HeaderFeedback plusFeedBack={plusFeedBack}/>\r\n      )}/>\r\n      <Section title=\"Statistics\" render={() => (\r\n        <Statistics statistic={state}/>\r\n      )}/>\r\n  </>\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}